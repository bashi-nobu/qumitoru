name: staging deploy

on:
  push:
    branches:
      - staging
jobs:
  build-image:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@master
      - name: Setup Python 3.7 for awscli
        uses: actions/setup-python@v1
        with:
          version: '3.7'
          architecture: 'x64'
      - name: Install awscli
        run: pip install --upgrade pip awscli
      - name: Login to ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ap-northeast-1
        run: |
          $(aws ecr get-login --no-include-email --region ap-northeast-1)
      - name: Build & Push Image
        env:
          ECR_DOMAIN_APP: ${{ secrets.ECR_DOMAIN_APP }}
          ECR_DOMAIN_WEB: ${{ secrets.ECR_DOMAIN_WEB }}
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
        run: |
          docker build -t ${ECR_DOMAIN_APP}:latest -f ./docker/django/Dockerfile .
          docker push ${ECR_DOMAIN_APP}:latest
          docker build -t ${ECR_DOMAIN_WEB}:latest -f ./docker/nginx/Dockerfile .
          docker push ${ECR_DOMAIN_WEB}:latest
  deploy:
    runs-on: ubuntu-18.04
    needs: [build-image]
    steps:
      - uses: actions/checkout@master
      - name: Setup Python 3.7 for awscli
        uses: actions/setup-python@v1
        with:
          version: '3.7'
          architecture: 'x64'
      - name: Install awscli
        run: pip install --upgrade pip awscli
      - name: Login to ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ap-northeast-1
        run: |
          $(aws ecr get-login --no-include-email --region ap-northeast-1)
      - name: install jq
        run: |
          wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
          mv jq-linux64 jq
      - name: deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ap-northeast-1
        run: |
          aws ecs describe-task-definition --task-definition qumitoru-service-stg | jq '.taskDefinition' \
           | jq -M 'del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)' > definition.json
          aws ecs register-task-definition --execution-role-arn arn:aws:iam::608680123973:role/ecs-task-role-stg --family qumitoru-service-stg --cli-input-json file://definition.json
          aws ecs update-service --cluster qumitoru-ecs-cluster-stg --service qumitoru-service-stg --task-definition qumitoru-service-stg
      - name: migrations
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ap-northeast-1
        run: |
          aws ecs run-task \
          --cluster qumitoru-ecs-cluster-stg \
          --task-definition qumitoru-migration-stg \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[${{secrets.SUBNET_ID1}},${{secrets.SUBNET_ID2}}],securityGroups=[${{secrets.SECURITY_GROUP_ID}}],assignPublicIp=ENABLED}"
      - name: create superuser
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ap-northeast-1
        run: |
          aws ecs run-task \
          --cluster qumitoru-ecs-cluster-stg \
          --task-definition qumitoru-createuser-stg \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[${{secrets.SUBNET_ID1}},${{secrets.SUBNET_ID2}}],securityGroups=[${{secrets.SECURITY_GROUP_ID}}],assignPublicIp=ENABLED}"
